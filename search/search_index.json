{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PixivFE","text":"<p>A privacy-respecting alternative front-end for Pixiv that doesn't suck.</p> <p>Ready-to-use running instances are available at the instance list.</p> <p></p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Lightweight - both the interface and the code</li> <li>Privacy-first - the server will do the work for you</li> <li>No bloat - we only serve HTML, CSS and minimal JS code</li> <li>Open source - you can trust me!</li> </ul>"},{"location":"#license","title":"License","text":"<p>PixivFE is licensed under AGPL-3.0.</p>"},{"location":"environment-variables/","title":"Environment Variables","text":"<p>PixivFE's behavior is controlled by environment variables. Currently, you can only set variables directly in your environment.</p> <p>An example configuration is provided in <code>.env.example</code>.</p> <p>This document is based on <code>doc/Environment Variables.go</code>.</p> <p>Tip</p> <p>To quickly set up PixivFE, you need to define two required environment variables:</p> <ul> <li><code>PIXIVFE_TOKEN</code>: Your Pixiv account cookie, which is necessary for accessing Pixiv's Ajax API. Refer to the guide on obtaining the PIXIVFE_TOKEN cookie for details on how to acquire your Pixiv token.</li> <li><code>PIXIVFE_PORT</code>: The port number on which PixivFE will run, for example, <code>8282</code>.</li> </ul> <p>For basic usage, configure your environment variables as follows: Text Only<pre><code>PIXIVFE_TOKEN=123456_AaBbccDDeeFFggHHIiJjkkllmMnnooPP\nPIXIVFE_PORT=8282\n</code></pre></p> <p>If you are setting up a development environment, enable the development mode by also setting: Text Only<pre><code>PIXIVFE_DEV=true\n</code></pre></p>"},{"location":"environment-variables/#required-variables","title":"Required variables","text":""},{"location":"environment-variables/#pixivfe_port-or-pixivfe_unixsocket","title":"<code>PIXIVFE_PORT</code> or <code>PIXIVFE_UNIXSOCKET</code>","text":"<p>Required: Yes (one of the two)</p> <ul> <li><code>PIXIVFE_PORT</code>: Port to run on, e.g., <code>PIXIVFE_PORT=8282</code>.</li> <li><code>PIXIVFE_UNIXSOCKET</code>: UNIX socket to run on, e.g., <code>PIXIVFE_UNIXSOCKET=/srv/http/pages/pixivfe</code>.</li> </ul>"},{"location":"environment-variables/#pixivfe_token","title":"<code>PIXIVFE_TOKEN</code>","text":"<p>Required: Yes</p> <p>Your Pixiv account cookie, used by PixivFE for authorization to fully access Pixiv's Ajax API.</p> <p>See the Obtaining the <code>PIXIVFE_TOKEN</code> cookie guide for detailed instructions.</p>"},{"location":"environment-variables/#optional-variables","title":"Optional variables","text":""},{"location":"environment-variables/#pixivfe_host","title":"<code>PIXIVFE_HOST</code>","text":"<p>Required: No (ignored if <code>PIXIVFE_UNIXSOCKET</code> is set)</p> <p>Note</p> <p>If you're not using a reverse proxy or running PixivFE inside Docker, you should set <code>PIXIVFE_HOST=0.0.0.0</code>. This will allow PixivFE to accept connections from any IP address or hostname. If you don't set this, PixivFE will refuse direct connections from other machines or devices on your network.</p> <p>This setting specifies the hostname or IP address that PixivFE should listen on and accept incoming connections from. For example, if you want PixivFE to only accept connections from the same machine (your local computer), you can set <code>PIXIVFE_HOST=localhost</code>.</p>"},{"location":"environment-variables/#pixivfe_requestlimit","title":"<code>PIXIVFE_REQUESTLIMIT</code>","text":"<p>Required: No</p> <p>Set to a number to enable the built-in rate limiter, e.g., <code>PIXIVFE_REQUESTLIMIT=15</code>.</p> <p>It's recommended to enable rate limiting in the reverse proxy in front of PixivFE rather than using this.</p>"},{"location":"environment-variables/#pixivfe_imageproxy","title":"<code>PIXIVFE_IMAGEPROXY</code>","text":"<p>Required: No, defaults to using the built-in proxy</p> <p>Note</p> <p>The protocol must be included in the URL, e.g., <code>https://piximg.example.com</code>, where <code>https://</code> is the protocol used.</p> <p>The URL of the image proxy server. Pixiv requires <code>Referer: https://www.pixiv.net/</code> in the HTTP request headers to fetch images directly. Set this variable if you wish to use an external image proxy or are unable to get images directly from Pixiv.</p> <p>See hosting an image proxy server or the list of public image proxies.</p>"},{"location":"environment-variables/#pixivfe_useragent","title":"<code>PIXIVFE_USERAGENT</code>","text":"<p>Required: No</p> <p>Default: <code>Mozilla/5.0 (Windows NT 10.0; rv:123.0) Gecko/20100101 Firefox/123.0</code></p> <p>The value of the <code>User-Agent</code> header used for requests to Pixiv's API.</p>"},{"location":"environment-variables/#pixivfe_acceptlanguage","title":"<code>PIXIVFE_ACCEPTLANGUAGE</code>","text":"<p>Required: No</p> <p>Default: <code>en-US,en;q=0.5</code></p> <p>The value of the <code>Accept-Language</code> header used for requests to Pixiv's API. Change this to modify the response language.</p>"},{"location":"environment-variables/#pixivfe_dev","title":"<code>PIXIVFE_DEV</code>","text":"<p>Required: No</p> <p>Set to any value to enable development mode, in which the server will live-reload HTML templates and disable caching, e.g., <code>PIXIVFE_DEV=true</code>.</p>"},{"location":"hosting-image-proxy-server/","title":"Hosting an image proxy server for Pixiv","text":"<p>If you prefer not to rely on third-party image proxy servers, you can set up your own! By hosting your own proxy server, you can access images from Pixiv by simply changing the Referer to <code>https://www.pixiv.net/</code>.</p> <p>By hosting your own Pixiv image proxy server, you can have more control over the caching and access to Pixiv images without relying on external services.</p>"},{"location":"hosting-image-proxy-server/#nginx","title":"nginx","text":"<p>To set up an image proxy server using nginx, follow these steps:</p>"},{"location":"hosting-image-proxy-server/#1-configure-the-proxy-cache-path","title":"1. Configure the proxy cache path","text":"<p>Set the cache path and parameters using the <code>proxy_cache_path</code> directive under the <code>http</code> context:</p> Nginx Configuration File<pre><code>proxy_cache_path /path/to/cache levels=1:2 keys_zone=pximg:10m max_size=10g inactive=7d use_temp_path=off;\n</code></pre>"},{"location":"hosting-image-proxy-server/#2-set-up-the-server-block","title":"2. Set up the server block","text":"Nginx Configuration File<pre><code>server {\n    listen 443 ssl http2;\n\n    ssl_certificate /path/to/ssl_certificate.crt;\n    ssl_certificate_key /path/to/ssl_certificate.key;\n\n    server_name pximg.example.com; # (1)!\n    access_log off;\n\n    location / {\n        proxy_cache pximg;\n        proxy_pass https://i.pximg.net;\n        proxy_cache_revalidate on;\n        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;\n        proxy_cache_lock on;\n        add_header X-Cache-Status $upstream_cache_status;\n        proxy_set_header Host i.pximg.net;\n        proxy_set_header Referer \"https://www.pixiv.net/\";\n        proxy_set_header User-Agent \"Mozilla/5.0 (Windows NT 10.0; rv:122.0) Gecko/20100101 Firefox/122.0\";\n\n        proxy_cache_valid 200 7d;\n        proxy_cache_valid 404 5m;\n    }\n}\n</code></pre> <ol> <li>Replace <code>pximg.example.com</code> with your desired domain.</li> </ol>"},{"location":"hosting-image-proxy-server/#cloudflare-workers","title":"Cloudflare Workers","text":"<p>Alternatively, you can set up an image proxy server using Cloudflare Workers:</p> JavaScript<pre><code>addEventListener(\"fetch\", event =&gt; {\n  event.respondWith(handleRequest(event.request));\n});\n\nasync function handleRequest(originalRequest) {\n  try {\n    let url = new URL(originalRequest.url);\n    url.hostname = \"i.pximg.net\";\n\n    let modifiedRequest = new Request(url, originalRequest);\n    let response = await fetch(modifiedRequest, {\n      headers: {\n        'Referer': 'https://www.pixiv.net/',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; rv:122.0) Gecko/20100101 Firefox/122.0'\n      }\n    });\n\n    if (!response.ok) {\n      return new Response(\"Error fetching the resource.\", { status: response.status });\n    }\n\n    return response;\n  } catch (error) {\n    console.error(\"Failed to fetch resource: \", error.message);\n\n    return new Response(\"An error occurred while fetching the resource.\", { status: 500 });\n  }\n}\n</code></pre>"},{"location":"hosting-image-proxy-server/#using-the-proxy-server","title":"Using the proxy server","text":"<p>Once you have set up your image proxy server, you can access Pixiv images by replacing the original domain with your proxy server domain:</p> Original URLProxy URL <p>https://i.pximg.net/img-original/img/2023/06/06/20/30/01/108783513_p0.png</p> <p>https://pximg.example.com/img-original/img/2023/06/06/20/30/01/108783513_p0.png</p>"},{"location":"hosting-image-proxy-server/#additional-resources","title":"Additional resources","text":"<ul> <li> <p>For more information, you can refer to this article by pixiv.cat, which also serves as an image proxy server. You can try an example image through their proxy.</p> </li> <li> <p>You can also check out this repository from TechnicalSuwako for additional references and examples.</p> </li> </ul>"},{"location":"hosting-pixivfe/","title":"Hosting PixivFE","text":"<p>PixivFE can be installed using various methods. This guide covers installation using Docker (recommended for production) and using a binary with a Caddy reverse proxy.</p> <p>Note</p> <p>PixivFE requires a Pixiv account token to access the API. Refer to the Obtaining the <code>PIXIVFE_TOKEN</code> cookie guide for detailed instructions.</p>"},{"location":"hosting-pixivfe/#docker","title":"Docker","text":"<p>Docker lets you run containerized applications. Containers are loosely isolated environments that are lightweight and contain everything needed to run the application, so there's no need to rely on what's installed on the host.</p> <p>Docker images for PixivFE are available at Docker Hub, with support for the amd64 platform.</p>"},{"location":"hosting-pixivfe/#docker-compose","title":"Docker Compose","text":"<p>Warning</p> <p>Deploying PixivFE using Docker Compose requires the Compose plugin to be installed. Follow these instructions on the Docker Docs on how to install it.</p>"},{"location":"hosting-pixivfe/#1-setting-up-the-repository","title":"1. Setting up the repository","text":"<p>Clone the PixivFE repository and navigate to the directory:</p> Bash<pre><code>git clone https://codeberg.org/VnPower/PixivFE.git &amp;&amp; cd PixivFE\n</code></pre>"},{"location":"hosting-pixivfe/#2-set-token","title":"2. Set token","text":"<p>Copy the <code>PHPSESSID</code> cookie value into <code>docker/pixivfe_token.txt</code>. This file will be used as a Docker secret.</p>"},{"location":"hosting-pixivfe/#3-configure-environment-variables","title":"3. Configure environment variables","text":"<p>Copy <code>.env.example</code> to <code>.env</code> and configure the variables as needed. Refer to the Environment variables page for more information.</p> <p>Note</p> <p>Ensure you set <code>PIXIVFE_HOST=0.0.0.0</code> in the <code>.env</code> file.</p> <p>This allows PixivFE to bind to all network interfaces inside the container, which is necessary for Docker's network management to function correctly. The network access restrictions will be handled by Docker itself, not within PixivFE.</p>"},{"location":"hosting-pixivfe/#4-compose","title":"4. Compose!","text":"<p>Run <code>docker compose up -d</code> to start PixivFE.</p> <p>To view the container logs, run <code>docker logs -f pixivfe</code>.</p>"},{"location":"hosting-pixivfe/#docker-cli","title":"Docker CLI","text":""},{"location":"hosting-pixivfe/#1-setting-up-the-repository_1","title":"1. Setting up the repository","text":"<p>Clone the PixivFE repository and navigate to the directory:</p> Bash<pre><code>git clone https://codeberg.org/VnPower/PixivFE.git &amp;&amp; cd PixivFE\n</code></pre>"},{"location":"hosting-pixivfe/#2-configure-environment-variables","title":"2. Configure environment variables","text":"<p>Copy <code>.env.example</code> to <code>.env</code> and configure the variables as needed. Refer to the Environment variables page for more information.</p> <p>Note</p> <p>Ensure you set <code>PIXIVFE_HOST=0.0.0.0</code> in the <code>.env</code> file.</p> <p>This allows PixivFE to bind to all network interfaces inside the container, which is necessary for Docker's network management to function correctly. The network access restrictions will be handled by Docker itself, not within PixivFE.</p>"},{"location":"hosting-pixivfe/#3-deploying-pixivfe","title":"3. Deploying PixivFE","text":"<p>Run the following command to deploy PixivFE:</p> Default port (<code>8282</code>)Custom port (e.g., <code>8080</code>) Bash<pre><code>docker run -d --name pixivfe -p 8282:8282 --env-file .env vnpower/pixivfe:latest\n</code></pre> Bash<pre><code>docker run -d --name pixivfe -p 8080:8282 --env-file .env vnpower/pixivfe:latest\n</code></pre> <p>If you're planning to use a reverse proxy, modify the port binding to only listen on the localhost port (e.g., <code>127.0.0.1:8282:8282</code>). This ensures that PixivFE listens only on the localhost, making it accessible solely through the reverse proxy.</p>"},{"location":"hosting-pixivfe/#binary","title":"Binary","text":"<p>This setup uses Caddy as the reverse proxy. Caddy is a great alternative to NGINX because it is written in the Go programming language, making it more lightweight and efficient. Additionally, Caddy is easy to configure, providing a simple and straightforward way to set up a reverse proxy.</p>"},{"location":"hosting-pixivfe/#1-setting-up-the-repository_2","title":"1. Setting up the repository","text":"<p>Clone the PixivFE repository, navigate to the directory, and install the dependencies:</p> Bash<pre><code>git clone https://codeberg.org/VnPower/PixivFE.git &amp;&amp; cd PixivFE\ngo install\n</code></pre>"},{"location":"hosting-pixivfe/#2-configure-environment-variables_1","title":"2. Configure environment variables","text":"<p>Copy <code>.env.example</code> to <code>.env</code> and configure the variables as needed. Refer to the Environment variables page for more information.</p>"},{"location":"hosting-pixivfe/#3-deploying-pixivfe_1","title":"3. Deploying PixivFE","text":"<p>Run <code>env $(cat .env | xargs) go run main.go</code> to start PixivFE. It will be accessible at <code>localhost:8282</code>.</p>"},{"location":"hosting-pixivfe/#4-deploying-caddy","title":"4. Deploying Caddy","text":"<p>Install Caddy using your package manager.</p> <p>In the PixivFE directory, create a file named <code>Caddyfile</code> with the following content:</p> Text Only<pre><code>example.com {\n  reverse_proxy localhost:8282\n}\n</code></pre> <p>Replace <code>example.com</code> with your domain and <code>8282</code> with the PixivFE port if you changed it.</p> <p>Run <code>caddy run</code> to start Caddy.</p>"},{"location":"hosting-pixivfe/#updating","title":"Updating","text":"<p>To update PixivFE to the latest version, follow the steps below that are relevant to your deployment method.</p>"},{"location":"hosting-pixivfe/#docker_1","title":"Docker","text":""},{"location":"hosting-pixivfe/#docker-compose_1","title":"Docker Compose","text":"<ol> <li> <p>Pull the latest Docker image and repository changes:    Bash<pre><code>docker compose pull &amp;&amp; git pull\n</code></pre></p> </li> <li> <p>Restart the container:    Bash<pre><code>docker compose up -d\n</code></pre></p> </li> </ol>"},{"location":"hosting-pixivfe/#docker-cli_1","title":"Docker CLI","text":"<ol> <li> <p>Pull the latest Docker image and repository changes:    Bash<pre><code>docker pull vnpower/pixivfe:latest &amp;&amp; git pull\n</code></pre></p> </li> <li> <p>Stop and remove the existing container:    Bash<pre><code>docker stop pixivfe &amp;&amp; docker rm pixivfe\n</code></pre></p> </li> <li> <p>Restart the container:    Bash<pre><code>docker run -d --name pixivfe -p 8282:8282 --env-file .env vnpower/pixivfe:latest\n</code></pre></p> </li> </ol>"},{"location":"hosting-pixivfe/#binary_1","title":"Binary","text":"<ol> <li> <p>Pull the latest changes from the repository:    Bash<pre><code>git pull\n</code></pre></p> </li> <li> <p>Rebuild and start PixivFE:    Bash<pre><code>go install\nenv $(cat .env | xargs) go run main.go\n</code></pre></p> </li> </ol>"},{"location":"hosting-pixivfe/#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Keep Caddy Running</li> </ul>"},{"location":"known-quirks/","title":"Known quirks","text":""},{"location":"known-quirks/#user-styles-not-working","title":"User styles not working","text":""},{"location":"known-quirks/#issue","title":"Issue","text":"<p>User styles, such as those applied using the Stylus browser extension, may not work properly with PixivFE.</p>"},{"location":"known-quirks/#cause","title":"Cause","text":"<p>PixivFE implements a strict Content-Security-Policy (CSP) that prevents inline styles from being loaded.</p>"},{"location":"known-quirks/#solution","title":"Solution","text":"<p>If you're using the Stylus browser extension, follow these steps to enable user styles:</p> <ol> <li>Open the Stylus extension options.</li> <li>Go to the \"Advanced\" section.</li> <li>Enable the option \"Circumvent CSP 'style-src' via adoptedStyleSheets\".</li> </ol> <p>This setting allows Stylus to bypass the CSP restriction and apply user styles correctly.</p> <p>For more information, refer to issue #1685 on the Stylus GitHub repository.</p>"},{"location":"obtaining-pixivfe-token/","title":"Obtaining the <code>PIXIVFE_TOKEN</code> cookie","text":"<p>This guide covers how to obtain the <code>PIXIVFE_TOKEN</code> cookie from your Pixiv account, which is necessary for authenticating with the Pixiv API.</p> <p>Warning</p> <p>You should create an entirely new account for this to avoid account theft. And also, PixivFE will get contents from your account. You might not want people to know what kind of illustrations you like :P</p> <p>For now, the only page that may contain contents that is relevant to you is the discovery page. Be careful if you are using your main account.</p>"},{"location":"obtaining-pixivfe-token/#1-log-in-to-pixiv","title":"1. Log in to Pixiv","text":"<p>Log in to the Pixiv account you want to use. Upon logging in, you should see the Pixiv landing page. If you are already logged in, simply navigate to the landing page.</p> <p></p>"},{"location":"obtaining-pixivfe-token/#2-open-developer-tools","title":"2. Open developer tools","text":""},{"location":"obtaining-pixivfe-token/#for-firefox","title":"For Firefox","text":"<p>Press <code>F12</code> to open the Firefox Developer Tools. Switch to the <code>Storage</code> tab.</p> <p></p>"},{"location":"obtaining-pixivfe-token/#for-chrome","title":"For Chrome","text":"<p>Press <code>F12</code> to open the Chrome Developer Tools. Switch to the <code>Application</code> tab.</p> <p></p>"},{"location":"obtaining-pixivfe-token/#3-locate-the-cookie","title":"3. Locate the Cookie","text":""},{"location":"obtaining-pixivfe-token/#for-firefox_1","title":"For Firefox","text":"<p>In the left sidebar, expand the <code>Cookies</code> section and select <code>www.pixiv.net</code>. This is where you will find your authentication cookie.</p> <p>Locate the cookie with the key <code>PHPSESSID</code>. The value next to this key is your account's token.</p> <p></p>"},{"location":"obtaining-pixivfe-token/#for-chrome_1","title":"For Chrome","text":"<p>In the left sidebar, find the <code>Storage</code> section. Expand the <code>Cookies</code> subsection and select <code>www.pixiv.net</code>. This is where you will find your authentication cookie.</p> <p>Locate the cookie with the key <code>PHPSESSID</code>. The value next to this key is your account's token.</p> <p></p>"},{"location":"obtaining-pixivfe-token/#4-set-the-environment-variable","title":"4. Set the environment variable","text":"<p>Copy the token value obtained in the previous step. If deploying with Docker Compose, paste it into the <code>docker/pixivfe_token.txt</code> file. Otherwise, set it as the <code>PIXIVFE_TOKEN</code> environment variable in your configuration.</p>"},{"location":"obtaining-pixivfe-token/#additional-notes","title":"Additional notes","text":"<ul> <li>The token format resembles: <code>123456_AaBbccDDeeFFggHHIiJjkkllmMnnooPP</code><ul> <li>The underscore separates your member ID (left side) from a random string (right side)</li> </ul> </li> <li>Logging out of Pixiv will reset the token. Always verify your token is current before reporting issues.</li> <li>Some Chrome-related content was sourced from Nandaka's guide.</li> </ul>"},{"location":"dev/framework-migration/","title":"Migrating from gofiber to net/http -- the plan","text":"<ul> <li>Config [already decoupled]</li> <li>Templating [decoupled, waiting for integration]</li> <li>Router    features<ul> <li>/users/:id/:category? (optional path segment)</li> <li>/i.pximg.net/* (wildcard)</li> </ul> </li> <li>Middleware</li> <li>Logging</li> <li>Rate limit (optional, could be loosely-coupled)</li> <li>Caching (optional, could be loosely-coupled)</li> </ul>"},{"location":"dev/general/","title":"Roadmap","text":""},{"location":"dev/general/#to-implement","title":"To implement","text":"<p>/settings/</p> <ul> <li> Merge login page with settings page</li> <li> Persistence (http-only secure cookies)</li> <li>User Settings</li> </ul> <p>/novel/</p> <ul> <li>Novel support Might need some ideas for the reader's UI. Allow options for font size and family? Black and white backgrounds? Theme support?  </li> </ul> <p>/series/ - [ ] Manga series Serialized web comics. Example: https://www.pixiv.net/user/13651304/series/171013 - [ ] Novel series  </p> <p>Independent features</p> <ul> <li> <p> Multiple tokens support Now you can do PIXIVFE_TOKEN=TOKEN_A,TOKEN_B</p> </li> <li> <p> Pixivision https://www.pixivision.net/en/ Pretty good to discover new artworks n stuff. Implement by parsing the webpage.</p> </li> <li> <p> RSS support for Pixivision  </p> </li> <li> <p> Search page A page to do more extensive searching. Might require JavaScript for search recommendation, if wanted.</p> </li> <li> <p> Full landing page There are a lot of sections for the landing page. https://www.pixiv.net/ajax/top/illust The artwork parsing part has already been implemented flawlessly. We only have to write the frontend code for those sections.</p> </li> <li> <p> Various interesting pages from Pixiv.net  </p> </li> <li>https://www.pixiv.net/idea/</li> <li>https://www.pixiv.net/request</li> <li>https://www.pixiv.net/contest/ (no AJAX endpoints)</li> </ul>"},{"location":"dev/general/#to-consider","title":"To consider","text":"<ul> <li> <p>Speculative Fetching Fetch images from pixiv and cache them while we send the response page to users. When they ask for those images, we already have those.</p> </li> <li> <p>App API support May be painful to implement. Required to fully replace Pixiv, if user actions won't work universally. https://codeberg.org/VnPower/PixivFE/issues/7</p> </li> <li> <p>Testing Do we really need testing? What to test?</p> </li> <li> <p>User discovery For discovery page. Pretty useless if user actions (following) doesn't work.</p> </li> <li> <p>\"Popular\" artworks Check the README of this: https://github.com/kokseen1/Mashiro</p> </li> <li> <p>i18n The last thing to work on, probably.</p> </li> </ul>"},{"location":"dev/general/#misc","title":"Misc","text":"<ul> <li> <p> Ranking page A lot of options weren't implemented.</p> </li> <li> <p> Revisit ranking calendar There should be a way to display R18 thumbnails now?</p> </li> </ul>"},{"location":"dev/novels/","title":"Novels","text":""},{"location":"dev/novels/#functions","title":"Functions","text":"<ul> <li> Novel series</li> </ul>"},{"location":"dev/novels/#ui","title":"UI","text":"<ul> <li> Furigana support</li> <li> Reader settings panel</li> <li> Novel page with vertical text If <code>body.suggestedSettings.viewMode == 1</code></li> <li> Attributes</li> <li> Recent novels from writers</li> <li> Page support</li> <li> Recommended novels</li> <li> Other works panel?</li> </ul>"},{"location":"dev/novels/#misc","title":"Misc","text":"<ul> <li> Novel ranking</li> <li> Novel mode for any possible pages</li> </ul>"},{"location":"dev/pitfalls/","title":"Pitfalls","text":""},{"location":"dev/pitfalls/#strict-csp","title":"Strict CSP","text":"<p>Reference: search for \"Content-Security-Policy\" in **.go</p> <p>Current CSP disallows inline styles and scripts and iframes.</p>"},{"location":"dev/pitfalls/#low-quality-go-module-neturl","title":"Low Quality Go Module: net/url","text":"<p><code>url.Path</code> is stored decoded (no %XX). <code>url.Scheme</code> is stored without <code>://</code> (mandated by RFC). Not sure why Go does that. Felt like this is bound to cause some nasty bug on decoding and encoding.</p> <p>Current proxied URLs don't have weird characters in them. Hopefully it stays this way.</p> <p>Solution: Replace \"net/url\" with a better third-party module</p>"},{"location":"dev/pitfalls/#jet-templating-engine-is-not-type-checked","title":"Jet templating engine is not type checked","text":"<p>Solution: templ</p>"},{"location":"dev/pitfalls/#jet-illust-vs-illust","title":"Jet <code>.Illust</code> vs <code>Illust</code>","text":"<p>Be careful when you write a .jet.html template file.</p> <p>If you see error like <code>&lt;variable name&gt; not found in map[...]</code> when visiting a page, you need to add a dot before all data member access. e.g. from <code>Illust</code> to <code>.Illust</code>. gofiber doesn't mention this.</p> <p>In Jet, variables are accessed without a dot (<code>PageURL</code>), while data members (the <code>data</code> parameter to <code>Render(...)</code>). are accessed with a dot in front.</p> <p>There are 3 types of variables.</p> <ul> <li>Global variables. Global functions are those.</li> <li>Page variables. They are provided to Jet by the server.</li> <li>Temporary variables. You use <code>abc := ...</code> to define those.</li> </ul>"},{"location":"dev/unified/","title":"A unified documentation for PixivFE","text":""},{"location":"dev/unified/#proposals","title":"Proposals","text":"<p>This section contains some potential features or redesigns that can be implemented into PixivFE.</p>"},{"location":"dev/unified/#pixivision","title":"Pixivision","text":"<p>Summary: Pixivision is a service owned by Pixiv that publishes articles about various types of artwork themes...</p> <p>Notes: Pixivision is an independent service. Most of the data comes from Pixivision's website. Pixivision does not provide an API for data access. Pages on Pixivision seems to be static, so the HTML could be easily parsed.</p> <p>Thoughts: - Write a separate module for Pixivision and integrate it into PixivFE. - We do web scraping and HTML parsing for this one.</p>"},{"location":"dev/unified/#sketch","title":"Sketch","text":"<p>Summary: Sketch is a service owned by Pixiv that allow users to livestream, mostly for their drawing process.</p> <p>Notes: Sketch is an independent service. Most of the data comes from Pixivision's website. Sketch has a dedicated API for data access. Sketch uses the same type of authentication that Pixiv has. Detailed notes TBA.</p> <p>Thoughts: - Thanks to the public API, pages could be build easily. - For the streaming part, we may have to include a JavaScript library for HLS streaming.</p>"},{"location":"dev/unified/#ugoira-support","title":"Ugoira support","text":"<p>Summary: Ugoiras are Pixiv's \"animated image\" format.</p> <p>Notes: Ugoiras are basically a bunch of sorted images combined with a fixed delay for each of them. Pixiv provides one JSON endpoint for delays and filenames and one endpoint for the (ZIP) images archive. One has to write their own player based on things Pixiv provide. You can checkout Pixiv's implementation on their own ugoira player here.</p> <p>Thoughts: - GIF/APNG/WEBP renderer. - Some people want to convert ugoiras to video formats? (no idea)</p>"},{"location":"dev/unified/#landing-page","title":"Landing page","text":"<p>Summary: PixivFE's homepage.</p> <p>Notes: Pixiv's homepage contains a lot of interesting contents. PixivFE's backend for the landing page already implemented almost all of the data from Pixiv. The only thing left is to write the frontend for them. Detailed notes TBA.</p> <p>Thoughts: - Spend some time to write some HTML/SCSS. - Currently, you have to authenticate (login) in order to access the full landing page. Can we show the full page to unauthenticated users as well?</p>"},{"location":"dev/unified/#popular-artworks","title":"Popular artworks","text":"<p>Summary: Pixiv has a \"Sort by views\" and \"Sort by bookmarks\" feature that is only available for premium users.</p> <p>Notes: There are some search \"hacks\" that could yield relatively accurate results for popular artworks.</p> <p>Ideas: - Look into repos that attempts to retrieve popular artworks - If search \"hacking\" is possible, could there be more \"hacks\" around?</p>"},{"location":"dev/unified/#user-discovery-page","title":"\"User discovery\" page","text":"<p>Summary: Like artwork discovery, but it is for users.</p> <p>Notes: Currently, we do not know if we could implement the \"user follow\" function into PixivFE. The development for this page has been put on hold because of it, since \"following\", after all, is what you want to do if you discover an user you like.</p> <p>Ideas: - It is easy to implement thanks to the API.</p>"},{"location":"dev/unified/#search-suggestions","title":"Search suggestions","text":"<p>Summary: Pixiv provides an API endpoint for search suggestions.</p> <p>Notes: The search suggestions appear when you focus on the search bar.</p> <p>Ideas: - We can prefetch the search suggestions for every requests on PixivFE. But this means we will have to add one request (to Pixiv's API) for each PixivFE page request. (Caching?) - We can implement JavaScript to fetch the suggestions every time the user focuses on the search bar. - We can create a separate page just for this.</p>"},{"location":"dev/unified/#app-api-support","title":"App API support","text":"<p>Summary: Apart of the public AJAX API, Pixiv also provides a private API, used specifically for mobile applications.</p> <p>Notes: Because you already could do almost everything through the AJAX API, there is really no point to integrate the App API. I added this section because there are some limitations to the public API (following,...).</p> <p>Ideas: - Write more stuff when desperate.</p>"},{"location":"dev/unified/#novel-page","title":"Novel page","text":""},{"location":"dev/unified/#image-grid-layout","title":"Image grid layout","text":""},{"location":"dev/unified/#series","title":"Series","text":""},{"location":"dev/unified/#servers-pixivfe-git-versioncommit","title":"Server's PixivFE Git version/commit","text":""},{"location":"dev/unified/#artwork-filters","title":"Artwork filters","text":""},{"location":"dev/unified/#quick-download-button","title":"Quick download button","text":""},{"location":"dev/unified/#download-all-buttons-for-all-containers","title":"Download all buttons for all containers","text":""},{"location":"dev/unified/#filters","title":"Filters","text":""},{"location":"dev/unified/#page-profile","title":"Page profile","text":""},{"location":"dev/unified/#option-to-open-in-new-tabs","title":"Option to open in new tabs","text":""},{"location":"dev/unified/#download-button-in-artwork-page","title":"Download button in artwork page","text":""},{"location":"dev/unified/#option-to-select-default-image-quality-in-artwork-page","title":"Option to select default image quality in artwork page","text":""},{"location":"dev/unified/#flaws","title":"Flaws","text":"<p>This section documents some bad/buggy designs in PixivFE's design, both frontend and backend.</p>"},{"location":"dev/unified/#cookies-management-validation","title":"Cookies management / validation","text":"<p>All cookie values could be set directly without validation. Should we be concerned?</p>"},{"location":"dev/unified/#switchers","title":"\"Switchers\"","text":"<p>Switchers should know what the current value is.</p>"},{"location":"dev/unified/#kmutex","title":"\"kmutex\"","text":"<p>Sometimes panics.</p>"},{"location":"dev/unified/#references","title":"References","text":"<p>This section contains multiple external links to materials/resources that could help.</p> <ul> <li>pixiv.pics</li> </ul>"},{"location":"dev/user-customization/","title":"Per-User Customization Options","text":"<p>Probably cookie-based.</p>"},{"location":"dev/user-customization/#site-wide","title":"site-wide","text":"<ul> <li> sidebar close on history change or not #63</li> <li> navbar sticky or not</li> <li> Multiple tokens support Let the host supply multiple tokens at once to avoid overuse.</li> </ul>"},{"location":"dev/user-customization/#novel","title":"novel","text":"<ul> <li> font size</li> <li> font family</li> </ul>"},{"location":"dev/user-customization/#artwork","title":"artwork","text":"<ul> <li> native AI/R15/R18/R18-G... artwork filtering We can filter them out using values supplied by Pixiv for each artworks.</li> </ul>"},{"location":"dev/user-customization/#search","title":"search","text":"<ul> <li> add an option to do potentially very extensive searches Sort by bookmarks</li> </ul>"}]}